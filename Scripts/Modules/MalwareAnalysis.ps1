# MalwareAnalysis.ps1
# Comprehensive malware analysis functions

<#
.SYNOPSIS
    Malware Analysis Functions

.DESCRIPTION
    This module provides comprehensive malware analysis capabilities:
    - Invoke-MalwareAnalysis: Combines YARA scanning, static analysis, and behavioral monitoring

.NOTES
    Author: Forensic Analysis Team
    Version: 1.0.0
    Dependencies: YaraAnalysis.ps1, StaticAnalysis.ps1, BehavioralAnalysis.ps1
#>

function Invoke-MalwareAnalysis {
    <#
    .SYNOPSIS
        Performs comprehensive malware analysis.
    .DESCRIPTION
        Combines YARA scanning, static analysis, and behavioral monitoring for complete malware detection.
    .PARAMETER Path
        File or directory path to analyze.
    .PARAMETER OutputPath
        Directory to save all analysis results.
    .PARAMETER IncludeBehavioral
        Whether to include behavioral analysis (requires running processes).
    .PARAMETER YaraRulesPath
        Path to YARA rules (will download if not specified).
    .EXAMPLE
        Invoke-MalwareAnalysis -Path C:\Suspicious -OutputPath C:\MalwareAnalysis
    #>
    param(
        [Parameter(Mandatory = $true)]
        [string]$Path,
        [string]$OutputPath = ".",
        [bool]$IncludeBehavioral = $false,
        [string]$YaraRulesPath
    )

    Write-Host "=== COMPREHENSIVE MALWARE ANALYSIS ===" -ForegroundColor Cyan

    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $analysisDir = Join-Path $OutputPath "MalwareAnalysis_$timestamp"

    if (-not (Test-Path $analysisDir)) {
        New-Item -ItemType Directory -Path $analysisDir -Force | Out-Null
    }

    $workflow = @{
        Timestamp         = Get-Date
        Path              = $Path
        IncludeBehavioral = $IncludeBehavioral
        Steps             = @()
        Results           = @{}
    }

    # Step 1: Download/Update YARA Rules
    Write-Host "`nStep 1: Preparing YARA Rules" -ForegroundColor Yellow
    try {
        if (-not $YaraRulesPath) {
            $YaraRulesPath = Get-YaraRules -OutputPath $analysisDir
        }
        $workflow.Results.YaraRules = $YaraRulesPath
        $workflow.Steps += "YARA Rules: Success - $YaraRulesPath"
        Write-Host "[OK] YARA rules prepared" -ForegroundColor Green
    }
    catch {
        $workflow.Steps += "YARA Rules: Error - $($_.Exception.Message)"
        Write-Warning "YARA rules preparation error: $($_.Exception.Message)"
    }

    # Step 2: YARA Scanning
    Write-Host "`nStep 2: YARA Malware Scanning" -ForegroundColor Yellow
    try {
        $yaraResults = Invoke-YaraScan -Path $Path -RulesPath $YaraRulesPath -OutputPath $analysisDir
        $workflow.Results.YaraScan = $yaraResults
        $workflow.Steps += "YARA Scan: Success - $yaraResults"
        Write-Host "[OK] YARA scanning completed" -ForegroundColor Green
    }
    catch {
        $workflow.Steps += "YARA Scan: Error - $($_.Exception.Message)"
        Write-Warning "YARA scanning error: $($_.Exception.Message)"
    }

    # Step 3: Static Analysis
    Write-Host "`nStep 3: Static File Analysis" -ForegroundColor Yellow
    try {
        $staticResults = Get-FileStaticAnalysis -Path $Path -OutputPath $analysisDir -DeepAnalysis $true
        $workflow.Results.StaticAnalysis = $staticResults
        $workflow.Steps += "Static Analysis: Success - $staticResults"
        Write-Host "[OK] Static analysis completed" -ForegroundColor Green
    }
    catch {
        $workflow.Steps += "Static Analysis: Error - $($_.Exception.Message)"
        Write-Warning "Static analysis error: $($_.Exception.Message)"
    }

    # Step 4: Behavioral Analysis (optional)
    if ($IncludeBehavioral) {
        Write-Host "`nStep 4: Behavioral Analysis" -ForegroundColor Yellow
        try {
            # Get process names from the path
            $processes = Get-Process | Where-Object { $_.Path -and $_.Path.StartsWith($Path) } | Select-Object -Unique Name

            if ($processes) {
                foreach ($process in $processes) {
                    $behaviorResults = Get-BehavioralAnalysis -ProcessName $process.Name -Duration 30 -OutputPath $analysisDir
                    $workflow.Results.BehavioralAnalysis = $behaviorResults
                }
                $workflow.Steps += "Behavioral Analysis: Success - $behaviorResults"
                Write-Host "[OK] Behavioral analysis completed" -ForegroundColor Green
            }
            else {
                $workflow.Steps += "Behavioral Analysis: No running processes found"
                Write-Host "[OK] No running processes found for behavioral analysis" -ForegroundColor Green
            }
        }
        catch {
            $workflow.Steps += "Behavioral Analysis: Error - $($_.Exception.Message)"
            Write-Warning "Behavioral analysis error: $($_.Exception.Message)"
        }
    }

    # Save workflow summary
    $summaryFile = Join-Path $analysisDir "malware_analysis_workflow.json"
    $workflow | ConvertTo-Json -Depth 3 | Out-File $summaryFile

    Write-Host "`n=== MALWARE ANALYSIS COMPLETE ===" -ForegroundColor Green
    Write-Host "Results saved to: $analysisDir" -ForegroundColor Cyan
    Write-Host "Summary: $summaryFile" -ForegroundColor Cyan

    return $analysisDir
}